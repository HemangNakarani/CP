struct SegmentTree {

        vector<int> t;
        int n;

        SegmentTree(int n) {
            this->n = n;
            this->t.assign(4 * n, INT_MIN);
        }

        int sum(int v, int tl, int tr, int l, int r) {
            if (l > r)
                return 0;
            if (l == tl && r == tr) {
                return t[v];
            }
            int tm = (tl + tr) / 2;
            return max(sum(v * 2, tl, tm, l, min(r, tm)),
                       sum(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r));
        }

        void update(int v, int tl, int tr, int pos, int new_val) {
            if (tl == tr) {
                t[v] = new_val;
            } else {
                int tm = (tl + tr) / 2;
                if (pos <= tm)
                    update(v * 2, tl, tm, pos, new_val);
                else
                    update(v * 2 + 1, tm + 1, tr, pos, new_val);
                t[v] = max(t[v * 2], t[v * 2 + 1]);
            }
        }
    };


// Use
SegmentTree st(N);
st.update(1,0,N-1,<pos>,<val>);
st.sum(1,0,N-1,<left>,<right>);
