
vector<ll> bit(N);

struct FenwickTreeOneBasedIndexing {

    ll n;
    FenwickTreeOneBasedIndexing(ll n) {
        this->n = n + 1;
    }

    FenwickTreeOneBasedIndexing(vector<ll> a) : FenwickTreeOneBasedIndexing(a.size()) {
        for (size_t i = 0; i < a.size(); i++)
            add(i, a[i]);
    }

    ll sum(ll idx) {
        ll ret = 0;
        for (++idx; idx > 0; idx -= idx & -idx)
            ret += bit[idx];
        return ret;
    }

    ll sum(ll l, ll r) {
        l--;
        r--;
        return sum(r) - sum(l - 1);
    }

    void add(ll idx, ll delta) {
        for (; idx <=n; idx += idx & -idx)
            bit[idx] += delta;
    }

    void addSorted(ll delta)
    {
        add(delta,1);
    }

    ll getK(ll k)
    {
        k--;
        return sum(k)-sum(k-1);
    }

    int getKthSorted(int k)
    {
        int res = 0;
        for (int i = 20; i >= 0; --i)
         {
    	      if(bit[res+(1<<i)]<k)
    	      {
    	          k-=bit[res+(1<<i)];
    	          res+=(1<<i);
    	      }
        }

        return res+1;
    }
};
