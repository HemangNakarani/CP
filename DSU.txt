struct DSU {
        int connected, size;
        vector<int> par, sz;

        DSU(int n) {
            size = n;
            par = vector<int>(n + 1);
            sz = vector<int>(n + 1);

            for (int i = 1; i <= n; i++) {
                par[i] = i;
                sz[i] = 1;
            }
            connected = n;
        }

        int getPar(int k) {
            while (k != par[k]) {
                par[k] = par[par[k]];
                k = par[k];
            }
            return k;
        }

        int getSize(int k) { return sz[getPar(k)]; }

        void unite(int u, int v) {
            int par1 = getPar(u), par2 = getPar(v);

            if (par1 == par2)
                return;

            connected--;

            if (sz[par1] > sz[par2])
                swap(par1, par2);

            sz[par2] += sz[par1];
            sz[par1] = 0;
            par[par1] = par[par2];
        }

        void print() {
            for (auto x : par)
                cout << x << " ";

            cout << "\n";
        }
    };
